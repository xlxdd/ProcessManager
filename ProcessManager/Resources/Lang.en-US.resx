<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="window_title" xml:space="preserve">
    <value>Process management</value>
  </data>
  <data name="process_name" xml:space="preserve">
    <value>name:</value>
  </data>
  <data name="process_number" xml:space="preserve">
    <value>Number:</value>
  </data>
  <data name="process_path" xml:space="preserve">
    <value>Startup path:</value>
  </data>
  <data name="f_process" xml:space="preserve">
    <value>Process management</value>
  </data>
  <data name="f_setting" xml:space="preserve">
    <value>set up</value>
  </data>
  <data name="p_CPU" xml:space="preserve">
    <value>CPU usage</value>
  </data>
  <data name="p_name" xml:space="preserve">
    <value>Process Name</value>
  </data>
  <data name="p_operation" xml:space="preserve">
    <value>operation</value>
  </data>
  <data name="p_priority" xml:space="preserve">
    <value>priority</value>
  </data>
  <data name="p_RAM" xml:space="preserve">
    <value>Memory usage</value>
  </data>
  <data name="p_status" xml:space="preserve">
    <value>Process status</value>
  </data>
  <data name="process_closeMode" xml:space="preserve">
    <value>Closing method:</value>
  </data>
  <data name="process_delayTime" xml:space="preserve">
    <value>Delay time:</value>
  </data>
  <data name="process_maxCPU" xml:space="preserve">
    <value>CPU usage reboot:</value>
  </data>
  <data name="process_maxRAM" xml:space="preserve">
    <value>Memory usage reboot:</value>
  </data>
  <data name="process_overTimeTime" xml:space="preserve">
    <value>Timeout period:</value>
  </data>
  <data name="process_parameter" xml:space="preserve">
    <value>Startup parameters:</value>
  </data>
  <data name="process_processCount" xml:space="preserve">
    <value>Number of processes:</value>
  </data>
  <data name="process_showMode" xml:space="preserve">
    <value>Display mode:</value>
  </data>
  <data name="process_startMode" xml:space="preserve">
    <value>Startup method:</value>
  </data>
  <data name="process_windowCount" xml:space="preserve">
    <value>Number of windows:</value>
  </data>
  <data name="s_Chinese" xml:space="preserve">
    <value>Chinese</value>
  </data>
  <data name="s_English" xml:space="preserve">
    <value>english</value>
  </data>
  <data name="o_close" xml:space="preserve">
    <value>close</value>
  </data>
  <data name="o_del" xml:space="preserve">
    <value>delete</value>
  </data>
  <data name="o_detail" xml:space="preserve">
    <value>View details</value>
  </data>
  <data name="o_edit" xml:space="preserve">
    <value>edit</value>
  </data>
  <data name="o_hide" xml:space="preserve">
    <value>Hide interface</value>
  </data>
  <data name="o_show" xml:space="preserve">
    <value>Display interface</value>
  </data>
  <data name="o_start" xml:space="preserve">
    <value>start-up</value>
  </data>
  <data name="b_cancel" xml:space="preserve">
    <value>cancel</value>
  </data>
  <data name="b_confirm" xml:space="preserve">
    <value>determine</value>
  </data>
  <data name="process_enable" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="b_browser" xml:space="preserve">
    <value>browse</value>
  </data>
  <data name="t_add" xml:space="preserve">
    <value>Add Process</value>
  </data>
  <data name="t_del" xml:space="preserve">
    <value>Delete Process</value>
  </data>
  <data name="t_detail" xml:space="preserve">
    <value>Process information</value>
  </data>
  <data name="f_add" xml:space="preserve">
    <value>Add Process</value>
  </data>
  <data name="f_closeAll" xml:space="preserve">
    <value>Close all processes</value>
  </data>
  <data name="f_startAll" xml:space="preserve">
    <value>Start all processes</value>
  </data>
  <data name="e_namenotnull" xml:space="preserve">
    <value>The name is not empty.</value>
  </data>
  <data name="m_del" xml:space="preserve">
    <value>Are you sure to delete?</value>
  </data>
  <data name="t_edit" xml:space="preserve">
    <value>Editing process</value>
  </data>
  <data name="e_cpunotnull" xml:space="preserve">
    <value>CPU usage is not empty.</value>
  </data>
  <data name="e_cpurange" xml:space="preserve">
    <value>The CPU usage needs to be between 1-100.</value>
  </data>
  <data name="e_delaynotnull" xml:space="preserve">
    <value>The delay time is not empty.</value>
  </data>
  <data name="e_delayrange" xml:space="preserve">
    <value>The delay time is an integer greater than or equal to 0.</value>
  </data>
  <data name="e_numbernotnull" xml:space="preserve">
    <value>The number is not empty.</value>
  </data>
  <data name="e_numberrange" xml:space="preserve">
    <value>The number needs to be an integer greater than 0.</value>
  </data>
  <data name="e_otnotnull" xml:space="preserve">
    <value>The timeout period is not empty.</value>
  </data>
  <data name="e_otrange" xml:space="preserve">
    <value>The timeout period needs to be an integer greater than 0.</value>
  </data>
  <data name="e_pathnotnull" xml:space="preserve">
    <value>The startup path is not empty.</value>
  </data>
  <data name="e_processnotnull" xml:space="preserve">
    <value>The number of processes is not empty.</value>
  </data>
  <data name="e_processrange" xml:space="preserve">
    <value>The number of processes needs to be an integer greater than 0.</value>
  </data>
  <data name="e_ramnotnull" xml:space="preserve">
    <value>The RAM usage is not empty.</value>
  </data>
  <data name="e_ramrange" xml:space="preserve">
    <value>The RAM usage needs to be an integer greater than 0.</value>
  </data>
  <data name="e_windownotnull" xml:space="preserve">
    <value>The number of windows is not empty.</value>
  </data>
  <data name="e_windowrange" xml:space="preserve">
    <value>The number of windows needs to be an integer greater than 0.</value>
  </data>
  <data name="enum_forceclose" xml:space="preserve">
    <value>Forced closure</value>
  </data>
  <data name="enum_signalclose" xml:space="preserve">
    <value>Signal off</value>
  </data>
  <data name="enum_messageclose" xml:space="preserve">
    <value>SendMessage closed</value>
  </data>
  <data name="enum_selfclose" xml:space="preserve">
    <value>Program self controlled shutdown</value>
  </data>
  <data name="enum_donothing" xml:space="preserve">
    <value>Not controlling</value>
  </data>
  <data name="enum_running" xml:space="preserve">
    <value>function</value>
  </data>
  <data name="enum_closed" xml:space="preserve">
    <value>close</value>
  </data>
  <data name="enum_hide" xml:space="preserve">
    <value>hide</value>
  </data>
  <data name="enum_show" xml:space="preserve">
    <value>display</value>
  </data>
  <data name="enum_bootstart" xml:space="preserve">
    <value>Power on and start up</value>
  </data>
  <data name="enum_bootnotstart" xml:space="preserve">
    <value>Power on does not start</value>
  </data>
  <data name="s_autolaunch" xml:space="preserve">
    <value>AutoLaunch</value>
  </data>
  <data name="s_notlaunch" xml:space="preserve">
    <value>NotLaunch</value>
  </data>
  <data name="process_name_en" xml:space="preserve">
    <value>English Name:</value>
  </data>
</root>